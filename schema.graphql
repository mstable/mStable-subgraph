enum TransactionType {
  MASSET_MINT
  MASSET_SWAP
  MASSET_REDEEM
  MASSET_REDEEM_MASSET
  MASSET_PAID_FEE
  SAVINGS_CONTRACT_DEPOSIT
  SAVINGS_CONTRACT_WITHDRAW
  STAKING_REWARDS_CONTRACT_CLAIM_REWARD
  STAKING_REWARDS_CONTRACT_EXIT
  STAKING_REWARDS_CONTRACT_STAKE
  STAKING_REWARDS_CONTRACT_WITHDRAW
}

enum AggregateMetricType {
  TOTAL_SUPPLY
  TOTAL_SAVINGS
}

enum TimeMetricPeriod {
  HOUR
  DAY
  WEEK
  MONTH
  QUARTER
  YEAR
}

enum StakingRewardsContractType {
  STAKING_REWARDS
  STAKING_REWARDS_WITH_PLATFORM_TOKEN
}

enum StakingRewardType {
  REWARD
  PLATFORM_REWARD
}

"""
An ERC20-compatible token
"""
type Token @entity {
  id: ID!

  """
  Token address
  """
  address: Bytes!

  """
  Token decimals
  """
  decimals: Int!

  """
  Token name
  """
  name: String!

  """
  Token symbol
  """
  symbol: String!

  """
  Total supply of the token
  """
  totalSupply: BigDecimal!

  """
  Quantity of the token that has been minted
  """
  totalMinted: BigDecimal!

  """
  Quantity of the token that has been burned
  """
  totalBurned: BigDecimal!
}

"""
Basket Asset (e.g. DAI for the mUSD basket)
"""
type Basset @entity {
  id: ID!

  """
  Basket the Basset is contained in
  """
  basket: Basket! @derivedFrom(field: "bassets")

  """
  Target weight of the Basset
  """
  maxWeight: BigInt!

  """
  Basset to Masset ratio for quantity conversion
  """
  ratio: BigInt!

  # TODO use enum
  """
  Status of the Basset, e.g. 'Normal'
  """
  status: String!

  """
  An ERC20 can charge transfer fee, e.g. USDT or DGX tokens
  """
  isTransferFeeCharged: Boolean!

  """
  The underlying Token for the Basset
  """
  token: Token!

  """
  Amount of the Basset that is held in collateral
  """
  vaultBalance: BigDecimal!
}

"""
A Basket of Bassets (e.g. for mUSD)
"""
type Basket @entity {
  id: ID!

  """
  The Bassets in the Basket
  """
  bassets: [Basset!]!

  """
  The collateralisation ratio of the Basket
  """
  collateralisationRatio: BigInt!

  """
  Max number of Bassets that can be present in the Basket
  """
  maxBassets: Int!

  """
  Flag for whether the Basket has failed
  """
  undergoingRecol: Boolean!

  """
  Flag for whether the Basket has failed
  """
  failed: Boolean!

  """
  Masset the Basket belongs to
  """
  masset: Masset! @derivedFrom(field: "basket")
}

"""
An mStable asset (e.g. mUSD)
"""
type Masset @entity {
  id: ID!

  # TODO explain that this is the BasketManager
  """
  The Basket of Bassets for this Masset
  """
  basket: Basket!

  """
  The swap fee rate
  """
  feeRate: BigInt!

  """
  The redemption fee rate
  """
  redemptionFeeRate: BigInt!

  """
  The underlying Token for this Masset
  """
  token: Token!

  """
  The token symbol
  """
  tokenSymbol: String!

  savingsContracts: [SavingsContract!]! @derivedFrom(field: "masset")
}

"""
An Ethereum account with balances/credit balances
"""
type Account @entity {
  id: ID!

  """
  Address of the account
  """
  address: Bytes!

  """
  CreditBalances of the account
  """
  creditBalances: [CreditBalance!]! @derivedFrom(field: "account")
}

"""
A credit balance for a given savings contract
"""
type CreditBalance @entity {
  id: ID!

  """
  Account
  """
  account: Account!

  """
  Amount as a decimal value
  """
  amount: BigDecimal!

  """
  Savings contract
  """
  savingsContract: SavingsContract!
}

type SavingsContract @entity {
  id: ID!

  masset: Masset!

  totalSavings: BigDecimal!

  totalCredits: BigDecimal!

  exchangeRates: [ExchangeRate!]! @derivedFrom(field: "savingsContract")

  # The same for all SavingsContracts; from SavingsManager
  savingsRate: BigDecimal!

  creditBalances: [CreditBalance!]! @derivedFrom(field: "savingsContract")

  automationEnabled: Boolean!
}

type ExchangeRate @entity {
  id: ID!

  exchangeRate: BigDecimal!

  timestamp: Int!

  savingsContract: SavingsContract!
}

interface TimeMetric {
  id: ID!

  value: BigDecimal!

  timestamp: Int!

  period: TimeMetricPeriod!
}

type VolumeMetric implements TimeMetric @entity {
  id: ID!

  value: BigDecimal!

  timestamp: Int!

  period: TimeMetricPeriod!

  type: TransactionType!
}

type AggregateMetric implements TimeMetric @entity {
  id: ID!

  value: BigDecimal!

  timestamp: Int!

  period: TimeMetricPeriod!

  type: AggregateMetricType!
}

"""
A common transaction type
"""
interface Transaction {
  id: ID!

  tx: Bytes!

  type: TransactionType!

  timestamp: Int!

  sender: Bytes!
}

# """ Any type of mint here """
# type MintTransaction implements Transaction @entity {
#   recipient: Bytes!
# }

"""
A bAsset<>bAsset swap
"""
type SwapTransaction implements Transaction @entity {
  id: ID!

  tx: Bytes!

  type: TransactionType!

  sender: Bytes!

  timestamp: Int!

  """
  Which mAsset is this tx in?
  """
  mAsset: Masset!

  mAssetUnits: BigDecimal!

  inputBasset: Basset!

  outputBasset: Basset!

  recipient: Bytes!
}

# """ Redeeming single/multi """
# type RedeemTransaction implements Transaction @entity {
#   recipient: Bytes!
# }

# """ RedeemMasset transaction event """
# type ExitTransaction implements Transaction @entity {
#   recipient: Bytes!
# }

"""
Log of the Fee payment
"""
type FeePaidTransaction implements Transaction @entity {
  id: ID!

  tx: Bytes!

  type: TransactionType!

  timestamp: Int!

  sender: Bytes!

  """
  Which mAsset is this tx in?
  """
  mAsset: Masset!

  mAssetUnits: BigDecimal!

  asset: Basset!
}

type StakingRewardsContractTransaction implements Transaction @entity {
  id: ID!

  tx: Bytes!

  type: TransactionType!

  sender: Bytes!

  timestamp: Int!

  stakingRewardsContract: StakingRewardsContract!
}

type StakingRewardsContractClaimRewardTransaction implements Transaction
  @entity {
  id: ID!

  tx: Bytes!

  type: TransactionType!

  sender: Bytes!

  timestamp: Int!

  stakingRewardsContract: StakingRewardsContract!

  amount: BigInt!
}

type StakingRewardsContractStakeTransaction implements Transaction @entity {
  id: ID!

  tx: Bytes!

  type: TransactionType!

  sender: Bytes!

  timestamp: Int!

  stakingRewardsContract: StakingRewardsContract!

  amount: BigInt!
}

type StakingRewardsContractWithdrawTransaction implements Transaction @entity {
  id: ID!

  tx: Bytes!

  type: TransactionType!

  sender: Bytes!

  timestamp: Int!

  stakingRewardsContract: StakingRewardsContract!

  amount: BigInt!
}

type RewardsDistributor @entity {
  """
  ID of the rewards distributor contract
  """
  id: ID!

  """
  Whitelisted fund managers
  """
  fundManagers: [Bytes!]!
}

type StakingReward @entity {
  # contract + account
  id: ID!

  """
  Reward amount
  """
  amount: BigInt!

  """
  The reward amount per token paid
  """
  amountPerTokenPaid: BigInt!

  """
  The staking rewards contract this reward is kept on
  """
  stakingRewardsContract: StakingRewardsContract!

  """
  The account the reward belongs to
  """
  account: Bytes!

  """
  The type of staking reward, e.g. "REWARD" or "PLATFORM_REWARD"
  """
  type: StakingRewardType!
}

type StakingRewardsContract @entity {
  """
  ID of the staking rewards contract
  """
  id: ID!

  """
  The type of staking rewards contract, e.g. `STAKING_REWARDS` or `STAKING_REWARDS_WITH_PLATFORM_TOKEN`
  """
  type: StakingRewardsContractType!

  """
  Duration
  """
  duration: Int!

  """
  Period finish
  """
  periodFinish: Int!

  """
  Last update time
  """
  lastUpdateTime: Int!

  """
  Staking token
  """
  stakingToken: Token!

  """
  Reward per token stored
  """
  rewardPerTokenStored: BigInt!

  """
  Reward rate
  """
  rewardRate: BigInt!

  """
  Rewards token
  """
  rewardsToken: Token!

  """
  Rewards distributor
  """
  rewardsDistributor: RewardsDistributor!

  """
  Total supply
  """
  totalSupply: BigInt!

  """
  Total staking rewards
  """
  totalStakingRewards: BigInt!

  """
  Accessor for staking balances kept on this contract
  """
  stakingBalances: [StakingBalance!]!
    @derivedFrom(field: "stakingRewardsContract")

  """
  Accessor for staking rewards kept on this contract
  """
  stakingRewards: [StakingReward!]!
    @derivedFrom(field: "stakingRewardsContract")

  """
  Accessor for claim reward transactions sent to this contract
  """
  claimRewardTransactions: [StakingRewardsContractClaimRewardTransaction!]!
    @derivedFrom(field: "stakingRewardsContract")

  """
  Accessor for stake transactions sent to this contract
  """
  stakeTransactions: [StakingRewardsContractStakeTransaction!]!
    @derivedFrom(field: "stakingRewardsContract")

  """
  Accessor for withdraw transactions sent to this contract
  """
  withdrawTransactions: [StakingRewardsContractWithdrawTransaction!]!
    @derivedFrom(field: "stakingRewardsContract")

  #######################################################
  # For type `STAKING_REWARDS_WITH_PLATFORM_TOKEN` only #

  """
  Platform token
  """
  platformToken: Token

  """
  Platform reward rate
  """
  platformRewardRate: BigInt

  """
  Platform reward per token stored
  """
  platformRewardPerTokenStored: BigInt

  """
  Total platform rewards
  """
  totalPlatformRewards: BigInt

  #######################################################
}

type StakingBalance @entity {
  # stakingRewardsContract + account
  id: ID!

  """
  Account this staking balance belongs to
  """
  account: Bytes!

  """
  Staking rewards contract this staking balance is kept on
  """
  stakingRewardsContract: StakingRewardsContract!

  """
  Staking balance amount
  """
  amount: BigInt!
}

type MerkleDropClaim @entity {
  id: ID!

  account: Bytes!

  merkleDrop: MerkleDrop!

  tranche: MerkleDropTranche!

  balance: BigInt!
}

type MerkleDropTranche @entity {
  id: ID!

  merkleDrop: MerkleDrop!

  expired: Boolean!

  trancheNumber: Int!

  merkleRoot: Bytes!

  totalAmount: BigInt!

  claims: [MerkleDropClaim!]! @derivedFrom(field: "tranche")
}

type MerkleDrop @entity {
  id: ID!

  token: Token!

  claims: [MerkleDropClaim!]! @derivedFrom(field: "merkleDrop")

  tranches: [MerkleDropTranche!]! @derivedFrom(field: "merkleDrop")

  funders: [Bytes!]!
}
