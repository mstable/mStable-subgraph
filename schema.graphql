# TODO use enum
#enum BassetStatus {
#  Default,
#  Normal,
#  BrokenBelowPeg,
#  BrokenAbovePeg,
#  Blacklisted,
#  Liquidating,
#  Liquidated,
#  Failed
#}

""" An ERC20-compatible token """
type Token @entity {
  id: ID!

  """ Token address """
  address: Bytes!

  """ Token decimals """
  decimals: Int!

  """ Token name """
  name: String!

  """ Token symbol """
  symbol: String!

  """ Total supply of the token """
  totalSupply: BigDecimal!

  """ Quantity of the token that has been minted """
  totalMinted: BigDecimal!

  """ Quantity of the token that has been transferred """
  totalTransferred: BigDecimal!

  """ Quantity of the token that has been burned """
  totalBurned: BigDecimal!
}

""" Basket Asset (e.g. DAI for the mUSD basket)  """
type Basset @entity {
  id: ID!

  """ Basket the Basset is contained in """
  basket: Basket! @derivedFrom(field: "bassets")

  """ Target weight of the Basset """
  targetWeight: BigInt!

  """ Basset to Masset ratio for quantity conversion """
  ratio: BigInt!

  # TODO use enum
  """ Status of the Basset, e.g. 'Normal' """
  status: String!

  """ An ERC20 can charge transfer fee, e.g. USDT or DGX tokens """
  isTransferFeeCharged: Boolean!

  """ The underlying Token for the Basset """
  token: Token!

  """ Amount of the Basset that is held in collateral """
  vaultBalance: BigDecimal!
}

""" A Basket of Bassets (e.g. for mUSD) """
type Basket @entity {
  id: ID!

  """ The Bassets in the Basket """
  bassets: [Basset!]!

  """ The collateralisation ratio of the Basket """
  collateralisationRatio: BigInt!

  """ Max number of Bassets that can be present in the Basket """
  maxBassets: Int!

  """ Flag for whether the Basket has failed """
  failed: Boolean!

  """ Masset the Basket belongs to """
  masset: Masset! @derivedFrom(field: "basket")
}

""" An mStable asset (e.g. mUSD) """
type Masset @entity {
  id: ID!

  # TODO explain that this is the BasketManager
  """ The Basket of Bassets for this Masset """
  basket: Basket!

  """ The redemption fee rate """
  feeRate: BigInt!

  """ The address of the fee pool """
  feePool: Bytes!

  """ The underlying Token for this Masset """
  token: Token!

  """ The token symbol """
  tokenSymbol: String!

  savingsContracts: [SavingsContract!]! @derivedFrom(field: "masset")
}

""" An Ethereum account with balances/credit balances """
type Account @entity {
  id: ID!

  """ Address of the account """
  address: Bytes!

  """ AccountBalances of the account """
  balances: [AccountBalance!]! @derivedFrom(field: "account")

  """ CreditBalances of the account """
  creditBalances: [CreditBalance!]! @derivedFrom(field: "account")
}

""" An account balance for a given token """
type AccountBalance @entity {
  id: ID!

  """ Account """
  account: Account!

  """ Amount as a decimal value """
  amount: BigDecimal!

  """ Token """
  token: Token!
}

""" A credit balance for a given savings contract """
type CreditBalance @entity {
  id: ID!

  """ Account """
  account: Account!

  """ Amount as a decimal value """
  amount: BigDecimal!

  """ Savings contract """
  savingsContract: SavingsContract!
}

type SavingsContract @entity {
  id: ID!

  masset: Masset!

  totalSavings: BigDecimal!

  totalCredits: BigDecimal!

  exchangeRates: [ExchangeRate!]! @derivedFrom(field: "savingsContract")

  # The same for all SavingsContracts; from SavingsManager
  savingsRate: BigInt!

  creditBalances: [CreditBalance!]! @derivedFrom(field: "savingsContract")

  automationEnabled: Boolean!
}

type ExchangeRate @entity {
  id: ID!

  exchangeRate: BigDecimal!

  timestamp: Int!

  savingsContract: SavingsContract!
}
